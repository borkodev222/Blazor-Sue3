@page "/use/ask"
@layout MainLayout
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject Sue3.Web.Blazor.Data.SueApiService SueApiService
@inject Sue3.Web.Blazor.Data.ModelHandlerService ModelHandlerService
@inject IToastService ToastService
@using SUM.Model.Components.Descriptive
@using SUM.Model.Components.Physical

<!-- This is the submenu for using the model: query sue, displaying the log-->

@if (loading)
{
    <div class="modal d-inline" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content border-0">
                <div class="modal-body">
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <!-- this is a wrapper for showing the log screen. handles all the logic for change the outputs-->
    <SueLog @ref="log" prediction="queryPrediction" Editable="true" ReQuery="AskSue" />
    <div class="row justify-content-center overflow-auto" style="margin-left:3vw;margin-right:3vw;margin-top:10vh;padding:1rem;margin-bottom:2rem;">
        <div class="col">
            <div class="justify-content-around">
                <div class="font-weight-bold">
                    @model.OutputParameter.Name
                </div>
            </div>
            <div class="justify-content-center">
                <section class="mt-2" id="no-more-tables">
                    <table class="table table-hover table-bordered">
                        <thead class="thead">
                            <tr>
                                <th style="width:20%">Name</th>
                                <th style="width:80%" colspan="2">Value</th>
                            </tr>
                        </thead>
                        <tbody>
                            <SueTableBody model="model" sample="querySample" maxTotalCatNameLength="maxTotalCatNameLength" />
                        </tbody>
                    </table>
                </section>
                <div class="row form-group">
                    <button type="button" class="btn btn-primary sue" @onclick="AskSue">Ask</button>
                </div>
                @if (showAnswer)
                {
                    <div class="row form-group" @onclick="log.Open">
                        <h1 class="sue-text">
                            @if (model.OutputParameter.IsNumeric)
                            {
                                @queryPrediction.OutputValue.SueValue
                            }
                            else
                            {
                                var canParse = Guid.TryParse(queryPrediction.OutputValue.SueValue, out Guid catGuid);
                                if (canParse)
                                {
                                    @model.OutputParameter.Categories.Find(c => c.CategoryGuid == catGuid).Value
                                }
                                else
                                {
                                    @queryPrediction.OutputValue.SueValue
                                }
                            }
                        </h1>
                        @if (queryPrediction.Neighbors.Count > 0)
                        {
                            <h4 class="sue-text">(@Math.Round(queryPrediction.Neighbors.First().Score, 2)%)</h4>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
}
@code {
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        if (SueApiService.LoggedIn)
        {
            if (ModelHandlerService.CurrentModel is not null)
            {
                ModelHandlerService.CurrentPane = ModelHandlerService.Panes.Use;
                ModelHandlerService.CurrentModel = await SueApiService.GetModel(HttpClient, ModelHandlerService.CurrentModel.ModelGuid);
                showAnswer = false;
                await GetNextSample();
                loading = false;
            }
            else
            {
                NavigationManager.NavigateTo("Models");
            }
        }
        else
        {
            NavigationManager.NavigateTo("");
        }
    }
    async Task GetNextSample()
    {
        showAnswer = false;
        querySample = await SueApiService.GetNewQuery(HttpClient, model.ModelGuid);
        StateHasChanged();
    }
    async Task AskSue()
    {
        querySample.Version = ModelHandlerService.CurrentModel.Version;
        queryPrediction = await SueApiService.PostAskSue(HttpClient, querySample);
        showAnswer = true;
        //SUM dll was packed when predictedquery has a default constructor, and SueValue has default get set.
        //This is because the rawvalues are hidden, so it cannot be calculated on this side.
        //Take note of this if there is ever anything wrong with SueValue
        // Easy way to change this: implement own prediction query.
        StateHasChanged();
    }
    bool loading = true;
    Model model => ModelHandlerService.CurrentModel;
    Sample querySample;
    PredictedQuery queryPrediction;
    bool showAnswer;
    SueLog log;
    int maxTotalCatNameLength = 50;
}

@page "/CalibrateLog/Calibrate"
@layout MainLayout
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject SueApiService SueApiService
@inject ModelHandlerService ModelHandlerService
@inject IToastService ToastService
@inject IJSRuntime JSRuntime
@using SUM.Model.Components.Physical
@using SUM.Model.Components.Descriptive
@using SUM.Model.Components.Accessories
@if (loading)
{
    <div class="modal d-inline" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content border-0">
                <div class="modal-body">
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
<style>
    .form-group-shadow {
        box-shadow: 0 0 0.75rem 0px rgb(0 0 0 / 10%);
        padding: 1rem;
        border-radius: 1rem;
    }
</style>
    <Modal @ref="eraseUserWeightModal">
        <Title>
            Confirm
        </Title>
        <Body>
            You have changed the correlation levers manually. Would you like to recalculate or continue to use yours?
        </Body>
        <Footer>
            <button type="button" class="btn btn-primary sue" @onclick="()=>PostSaveTrainBuild(true)">Recalculate</button>
            <button type="button" class="btn btn-primary sue" @onclick="()=>PostSaveTrainBuild(false)">Continue</button>
            <button type="button" class="btn btn-danger sue" @onclick="()=> { eraseUserWeightModal.Close(); }">Cancel</button>
        </Footer>
    </Modal>
    <Modal @ref="exportSampleModal">
        <Title>Confirm Export</Title>
        <Body>
            <div class="form-check">
                <input class="form-check-input" id="includePrediction" type="checkbox" @bind="includePredictions" />
                <label type="checkbox" for="includePrediction">Include Sue's predictions (Slower)</label>
            </div>
            <div class="form-check">
                <input disabled="@(!includePredictions)" class="form-check-input" id="useAllowIdenticalPoint" type="checkbox" @bind="useAllowIdenticalPoint" />
                <label type="checkbox" for="useAllowIdenticalPoint">Match MFE calculation</label>
            </div>
        </Body>
        <Footer>
            <button type="button" class="btn btn-primary sue" @onclick="async () => { exportSampleModal.Close(); await ExportSamples(); }">Confirm Export</button>
            <button type="button" class="btn btn-danger sue" @onclick="exportSampleModal.Close">Cancel</button>
        </Footer>
    </Modal>
    <div style="margin-top:1rem;width:calc(85vw - 250px);margin-bottom:3rem;">
        <div class="form-group text-center">
            <button type="button" disabled="@(!mfeStopped)" class="btn btn-primary sue" @onclick="UndoChanges"><i class='oi oi-reload' style="transform:scaleX(-1)"></i> Undo Changes</button>
            <button type="button" disabled="@(!mfeStopped)" class="btn btn-primary sue" @onclick="ExportSampleModalOpen">Export Samples</button>
            <button type="button" disabled="@(!mfeStopped)" class="btn btn-primary sue" @onclick="SaveTrainBuild">Save as Training & Build</button>
            <button type="button" disabled="@(!mfeStopped)" class="btn btn-primary sue" @onclick="CalibrateModel">Calibrate Model</button>
            <button type="button" class="btn btn-primary sue @(!mfeStopped?"d-none":string.Empty)" @onclick="CalcMFE">Calculate MFE</button>
            <button type="button" class="btn btn-primary sue @(mfeStopped?"d-none":string.Empty)" @onclick="()=> { mfeStopped = true; }">Stop MFE Calculation</button>

        </div>
        <div class="table-responsive">
            <table class="table table-hover table-bordered">
                <tbody>
                    <tr>
                        <td class="font-weight-bold" style="width:33%">Mean Forecasting Error:</td>
                        <td style="width:33%">@(calculatedMFE?$"Completion: {MFECalculatingPercentage}%":string.Empty)</td>
                        <td style="width:33%">@(calculatedMFE?$"MFE: {MFE}%":string.Empty)</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="m-auto d-table">
            <div class="form-group row">
                <label for="KValue" class="font-weight-bold col col-form-label">Value</label>
                <input type="number" id="KValue" @bind="model.KValue" class="sue col"
                       style="width:9rem;"
                       @onblur="validateKValue" min="1" max="@(model.UseNearestPoints?10:100)" step="1" />
            </div>
            <div class="form-group form-group-shadow">
                <input type="radio" id="nearestPoint" class="custom-control-inline" value="true"
                       name="KMode"
                       checked="@(model.UseNearestPoints == true)"
                       @onchange="@(() => { model.UseNearestPoints = true; model.KValue = 1; })" />
                <label for="nearestPoint">Nearest Points</label><br>
                <input type="radio" id="percentage" class="custom-control-inline" value="false"
                       name="KMode"
                       checked="@(model.UseNearestPoints == false)"
                       @onchange="@(() => { model.UseNearestPoints = false; model.KValue = 1; })" />
                <label for="percentage">Percentage</label>
            </div>
            <div class="form-group form-group-shadow">
                <input type="radio" id="weighted" class="custom-control-inline" value="true"
                       name="Weighting"
                       checked="@(model.IsWeighted == true)"
                       @onchange="@(() => { model.IsWeighted = true; })" />
                <label for="weighted">Weighted</label><br>
                @if (model.IsWeighted)
                {
                    <div class="form-check">
                        <input type="radio" id="smooth" class="custom-control-inline" value="true"
                               name="Smooth"
                               checked="@(model.IsSmooth == true)"
                               @onchange="@(() => { model.IsSmooth = true; })" />
                        <label for="smooth">Smooth</label><br>
                    </div>
                    <div class="form-check">
                        <input type="radio" id="exponential" class="custom-control-inline" value="false"
                               name="Smooth"
                               checked="@(model.IsSmooth == false)"
                               @onchange="@(() => { model.IsSmooth = false; })" />
                        <label for="exponential">Exponential</label>
                    </div>
                }
                <input type="radio" id="even" class="custom-control-inline" Value="false"
                       name="Weighting"
                       checked="@(model.IsWeighted == false)"
                       @onchange="@(() => { model.IsWeighted = false; })" />
                <label for="even">Even</label>
            </div>
        </div>
        <div class="table-responsive">
            <table class="table table-hover table-bordered">
                <thead>
                    <tr>
                        <th>Variable</th>
                        <th colspan="2">Lever</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var parameter in model.Parameters)
                    {
                        <tr>
                            <td>@parameter.Name</td>
                            <td>
                                <input class="form-control" type="number" id="@($"parameterInput{parameter.Name}")" @bind="parameter.UserWeight" @bind:event="oninput"
                                       @onblur="()=>validateWeight(parameter)" min="0" max="10" step="0.01" />
                            </td>
                            <td>
                                <input class="custom-range align-items-end" type="range" @bind-value="parameter.UserWeight" @bind-value:event="oninput"
                                       min="0" max="10" step="0.01" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="form-group">
            <input class="custom-control-inline" id="allowZeroDistance" @bind="model.AllowZeroDistancePoints" type="checkbox" />
            <label for="allowZeroDistance">Use Identical Point As Well?</label>
        </div>
        @if (exportingSamples)
        {
            <div class="table-responsive">
                <table class="table table-hover table-bordered">
                    <tbody>
                        <tr>
                            <td class="font-weight-bold">@($"Preparing Export: {exportSamplesPercentage}%")</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        }
    </div>
}
@code{
    protected override void OnInitialized()
    {
        loading = true;
        if (SueApiService.LoggedIn)
        {
            if (ModelHandlerService.CurrentModel is not null)
            {
                ModelHandlerService.CurrentPane = ModelHandlerService.Panes.Calibrate;
                loading = false;
            }
            else
            {
                NavigationManager.NavigateTo("Models");
            }
        }
        else
        {
            NavigationManager.NavigateTo("");
        }
    }
    async Task UndoChanges()
    {
        loading = true;
        calculatedMFE = false;
        await PostCancelAllCalculations();
        await SueApiService.PostUndoAllChanges(HttpClient, model.ModelGuid);
        ModelHandlerService.CalibrationSaved = true;
        ModelHandlerService.CurrentModel = await SueApiService.GetModel(HttpClient,model.ModelGuid);
        ToastService.ShowSuccess("Undo all changes");
        loading = false;
    }
    void ExportSampleModalOpen()
    {
        includePredictions = false;
        useAllowIdenticalPoint = false;
        exportSampleModal.Open();
    }
    async Task ExportSamples()
    {
        exportSamplesPercentage = 0.00;
        exportingSamples = true;
        await PostCancelCalculation(AsynchronousOperationManager.AsynchronousOperationType.ExportSamples);
        await SueApiService.GetExportSamples(HttpClient, model.ModelGuid, includePredictions, useAllowIdenticalPoint);
        bool exportFinished = false;
        while (!exportFinished)
        {
            await Task.Delay(300);
            exportSamplesPercentage = Math.Round(await SueApiService.GetPercentage(HttpClient, SUM.Model.Components.Accessories.AsynchronousOperationManager.AsynchronousOperationType.ExportSamples), 2);
            StateHasChanged();
            if (exportSamplesPercentage == 100)
                exportFinished = true;
        }
        var samplesString = await SueApiService.RetrieveExportSamples(HttpClient);
        exportingSamples = false;
        await JSRuntime.InvokeVoidAsync("downloadCSV", $"{model.Name} - Export Samples.csv", samplesString);
        StateHasChanged();
    }
    async Task SaveTrainBuild()
    {
        if (model.Parameters.Any(p => p.UserWeight != p.CalculatedWeight))
        {
            eraseUserWeightModal.Open();
        }
        else
            await PostSaveTrainBuild(true);
    }
    async Task PostSaveTrainBuild(bool eraseWeights)
    {
        await PostCancelAllCalculations();
        LogAndCalibrateViewModel dto = new LogAndCalibrateViewModel()
        {
            Model = model,
        };
        var opresult = await SueApiService.PostSaveCalibration(HttpClient, dto, eraseWeights);
        if (opresult.IsError)
        {
            ToastService.ShowError(opresult.Error);
        }
        else
        {
            ModelHandlerService.CurrentModel = await SueApiService.GetModel(HttpClient, model.ModelGuid);
            ModelHandlerService.CalibrationSaved = true;
            if (model.ModelStatusId == Model.TrainedModelStatusId)
            {
                NavigationManager.NavigateTo("Use");
            }
            else
            {
                NavigationManager.NavigateTo("Train");
            }
        }
    }
    async Task CalibrateModel()
    {
        await PostCancelAllCalculations();
        calculatedMFE = false;
        mfeStopped = true;
        LogAndCalibrateViewModel dto = new LogAndCalibrateViewModel()
        {
            Model = model,
        };
        await SueApiService.PostTemporaryCalibration(HttpClient, dto);
        ToastService.ShowSuccess("Model Calibrated");
        ModelHandlerService.CalibrationSaved = false;
    }
    async Task CalcMFE()
    {
        await CalibrateModel();
        await SueApiService.PostCalculateMFE(HttpClient, model.ModelGuid);
        bool mfeFinished = false;
        mfeStopped = false;
        while (!mfeFinished && !mfeStopped)
        {
            await Task.Delay(300);
            MFECalculatingPercentage = Math.Round(await SueApiService.GetPercentage(HttpClient, SUM.Model.Components.Accessories.AsynchronousOperationManager.AsynchronousOperationType.CalculateMFE), 2);
            MFE = Math.Round(await SueApiService.GetMFEScore(HttpClient) * 100, 2);
            calculatedMFE = true;
            StateHasChanged();
            if (MFECalculatingPercentage == 100)
                mfeFinished = true;
        }
        mfeStopped = true;
        StateHasChanged();
    }
    async Task PostCancelCalculation(AsynchronousOperationManager.AsynchronousOperationType asynchronousOperationType)
    {
        await SueApiService.PostCancelCalculation(HttpClient, asynchronousOperationType);
    }
    async Task PostCancelAllCalculations()
    {
        await SueApiService.PostCancelAllOperations(HttpClient);
    }
    void validateWeight(Parameter parameter)
    {
        if (parameter.UserWeight > 10)
            parameter.UserWeight = 10;
        else if(parameter.UserWeight < 0)
            parameter.UserWeight = 0;
    }
    void validateKValue()
    {
        if (model.KValue < 0)
            model.KValue = 1;
        else
        {
            if (model.UseNearestPoints)
            {
                if(model.KValue > 10)
                    model.KValue = 10;
            }
            else
            {
                if (model.KValue > 100)
                    model.KValue = 100;
            }
        }
    }
    Model model => ModelHandlerService.CurrentModel;
    bool exportingSamples { get; set; } = false;
    bool includePredictions { get; set; } = false;
    bool useAllowIdenticalPoint { get; set; } = false;
    bool loading { get; set; } = true;
    bool calculatedMFE { get; set; } = false;
    bool mfeStopped { get; set; } = true;
    double exportSamplesPercentage { get; set; }
    double MFE { get; set; } = 0.00;
    double MFECalculatingPercentage { get; set; }
    Modal exportSampleModal;
    Modal eraseUserWeightModal;
}
@page "/Manage/Model"
@layout MainLayout
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject SueApiService SueApiService
@inject ModelHandlerService ModelHandlerService
@inject IToastService ToastService

<!-- This is the submenu for managing the model: basically only creating the model, and setting name and description-->

@if (loading)
{
    <div class="modal d-inline" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content border-0">
                <div class="modal-body">
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="row justify-content-center overflow-auto" style="margin-top:15vh;padding:1rem;margin-bottom:2rem;">
        <div class="tab-content sue-form">
            <div class="tab-pane active">
                <EditForm autocomplete="off" Model="model">
                    <div class="form-group row">
                        <label for="#modelName" class="col col-form-label">Name</label>
                        <div class="col">
                            <input type="text" class="sue" id="modelName" @bind-value="model.Name" maxlength="45" @bind-value:event="oninput"/>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="#modelDescription" class="col col-form-label">Description</label>
                        <div class="col">
                            <InputText class="sue" id="modelDescription" @bind-Value="model.Description" />
                        </div>
                    </div>
                    <button disabled="@(model.Name == string.Empty)" type="submit"
                            @onclick="SaveModel" class="btn btn-primary sue float-right">
                        Save
                    </button>
                </EditForm>
            </div>
        </div>
    </div>
}
@code{        
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        if (SueApiService.LoggedIn)
        {
            if(ModelHandlerService.CurrentModel is not null)
            {
                ModelHandlerService.CurrentPane = ModelHandlerService.Panes.Manage;
                ModelHandlerService.CurrentManagePane = ModelHandlerService.ManagePanes.Model;
                if (!ModelHandlerService.NewModel) {
                    ModelHandlerService.CurrentModel = await SueApiService.GetModel(HttpClient, ModelHandlerService.CurrentModel.ModelGuid);
                    ToastService.ShowSuccess("Model Retrieved");
                }
                loading = false;
            }
            else
            {
                NavigationManager.NavigateTo("Models");
            }
        }
        else
        {
            NavigationManager.NavigateTo("");
        }
    }
    SUM.Model.Components.Descriptive.Model model => ModelHandlerService.CurrentModel;
    bool loading;
    async Task SaveModel()
    {
        if (model.Name.Contains(','))
            ToastService.ShowError("Name may not contain commas");
        else
        {
            loading = true;
            var opresult = await SueApiService.PostCreateOrUpdateModel(HttpClient, model);
            if (!opresult.IsError)
            {
                ModelHandlerService.CurrentModel = await SueApiService.GetModel(HttpClient, opresult.Id);
                ToastService.ShowSuccess("Model Saved");
                if (ModelHandlerService.NewModel)
                {
                    ModelHandlerService.CurrentManagePane = ModelHandlerService.ManagePanes.Outcome;
                    NavigationManager.NavigateTo("Manage/Outcome");
                }
            }
            loading = false;
        }
    }
}
